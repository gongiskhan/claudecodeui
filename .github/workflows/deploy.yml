name: Deploy to GCP and Verify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Fetch all history for all tags and branches
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Bump version and push to repo
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          npm version patch -m "chore(release): new version %s [ci skip]"
          git push
          git push --tags

      - name: Sync files to GCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          source: "./"
          target: "~/claudecodeui"
          strip_components: 1

      - name: Deploy and Verify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            set -e
            cd ~/claudecodeui

            echo "Installing dependencies..."
            npm ci --only=production

            echo "Building application..."
            npm run build

            echo "Restarting application with pm2..."
            pm2 reload claudecodeui || pm2 start ecosystem.config.mjs

            echo "Waiting for application to be available..."
            timeout=60
            while ! curl --silent --fail http://localhost:3456/health; do
              timeout=$(($timeout - 1))
              if [ $timeout -eq 0 ]; then
                echo "Health check timed out."
                exit 1
              fi
              sleep 1
            done

            echo "Performing health check..."
            curl --fail http://localhost:3456/health

            echo "Verifying deployed version..."
            # Note: This assumes jq is installed on the server.
            # If not, you might need to add 'sudo apt-get install -y jq'
            # or parse the JSON with another tool.
            DEPLOYED_VERSION=$(curl -s http://localhost:3456/api/version | jq -r .version)
            PACKAGE_VERSION=$(jq -r .version package.json)

            if [ "$DEPLOYED_VERSION" == "$PACKAGE_VERSION" ]; then
              echo "Version check passed! Deployed: $DEPLOYED_VERSION, Expected: $PACKAGE_VERSION"
            else
              echo "Version check failed! Deployed: $DEPLOYED_VERSION, Expected: $PACKAGE_VERSION"
              exit 1
            fi

            echo "Deployment successful!"
